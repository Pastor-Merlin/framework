// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoleTransformState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RoleTransformState GetRootAsRoleTransformState(ByteBuffer _bb) { return GetRootAsRoleTransformState(_bb, new RoleTransformState()); }
  public static RoleTransformState GetRootAsRoleTransformState(ByteBuffer _bb, RoleTransformState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoleTransformState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MyFlatBuffer.Vector3? Position { get { int o = __p.__offset(4); return o != 0 ? (MyFlatBuffer.Vector3?)(new MyFlatBuffer.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public MyFlatBuffer.Vector3? Rotation { get { int o = __p.__offset(6); return o != 0 ? (MyFlatBuffer.Vector3?)(new MyFlatBuffer.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartRoleTransformState(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<MyFlatBuffer.Vector3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<MyFlatBuffer.Vector3> rotationOffset) { builder.AddStruct(1, rotationOffset.Value, 0); }
  public static Offset<MyFlatBuffer.RoleTransformState> EndRoleTransformState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.RoleTransformState>(o);
  }
};


}
