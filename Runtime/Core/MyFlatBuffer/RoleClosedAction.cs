// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoleClosedAction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RoleClosedAction GetRootAsRoleClosedAction(ByteBuffer _bb) { return GetRootAsRoleClosedAction(_bb, new RoleClosedAction()); }
  public static RoleClosedAction GetRootAsRoleClosedAction(ByteBuffer _bb, RoleClosedAction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoleClosedAction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint RoleIds(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int RoleIdsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetRoleIdsBytes() { return __p.__vector_as_span<uint>(6, 4); }
#else
  public ArraySegment<byte>? GetRoleIdsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public uint[] GetRoleIdsArray() { return __p.__vector_as_array<uint>(6); }

  public static Offset<MyFlatBuffer.RoleClosedAction> CreateRoleClosedAction(FlatBufferBuilder builder,
      uint player_id = 0,
      VectorOffset role_idsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    RoleClosedAction.AddRoleIds(builder, role_idsOffset);
    RoleClosedAction.AddPlayerId(builder, player_id);
    return RoleClosedAction.EndRoleClosedAction(builder);
  }

  public static void StartRoleClosedAction(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlayerId(FlatBufferBuilder builder, uint playerId) { builder.AddUint(0, playerId, 0); }
  public static void AddRoleIds(FlatBufferBuilder builder, VectorOffset roleIdsOffset) { builder.AddOffset(1, roleIdsOffset.Value, 0); }
  public static VectorOffset CreateRoleIdsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRoleIdsVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRoleIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MyFlatBuffer.RoleClosedAction> EndRoleClosedAction(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.RoleClosedAction>(o);
  }
};


}
