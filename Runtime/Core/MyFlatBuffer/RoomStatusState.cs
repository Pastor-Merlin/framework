// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoomStatusState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RoomStatusState GetRootAsRoomStatusState(ByteBuffer _bb) { return GetRootAsRoomStatusState(_bb, new RoomStatusState()); }
  public static RoomStatusState GetRootAsRoomStatusState(ByteBuffer _bb, RoomStatusState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomStatusState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string RoomId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoomIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetRoomIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetRoomIdArray() { return __p.__vector_as_array<byte>(4); }
  public MyFlatBuffer.RoomStatus RoomStatus { get { int o = __p.__offset(6); return o != 0 ? (MyFlatBuffer.RoomStatus)__p.bb.GetSbyte(o + __p.bb_pos) : MyFlatBuffer.RoomStatus.PENDING; } }

  public static Offset<MyFlatBuffer.RoomStatusState> CreateRoomStatusState(FlatBufferBuilder builder,
      StringOffset room_idOffset = default(StringOffset),
      MyFlatBuffer.RoomStatus room_status = MyFlatBuffer.RoomStatus.PENDING) {
    builder.StartTable(2);
    RoomStatusState.AddRoomId(builder, room_idOffset);
    RoomStatusState.AddRoomStatus(builder, room_status);
    return RoomStatusState.EndRoomStatusState(builder);
  }

  public static void StartRoomStatusState(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddRoomId(FlatBufferBuilder builder, StringOffset roomIdOffset) { builder.AddOffset(0, roomIdOffset.Value, 0); }
  public static void AddRoomStatus(FlatBufferBuilder builder, MyFlatBuffer.RoomStatus roomStatus) { builder.AddSbyte(1, (sbyte)roomStatus, 0); }
  public static Offset<MyFlatBuffer.RoomStatusState> EndRoomStatusState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.RoomStatusState>(o);
  }
};


}
