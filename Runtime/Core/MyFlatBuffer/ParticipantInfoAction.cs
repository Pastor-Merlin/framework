// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ParticipantInfoAction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParticipantInfoAction GetRootAsParticipantInfoAction(ByteBuffer _bb) { return GetRootAsParticipantInfoAction(_bb, new ParticipantInfoAction()); }
  public static ParticipantInfoAction GetRootAsParticipantInfoAction(ByteBuffer _bb, ParticipantInfoAction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParticipantInfoAction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong ParticipentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string RoomId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoomIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetRoomIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetRoomIdArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<MyFlatBuffer.ParticipantInfoAction> CreateParticipantInfoAction(FlatBufferBuilder builder,
      ulong participent_id = 0,
      StringOffset room_idOffset = default(StringOffset)) {
    builder.StartTable(2);
    ParticipantInfoAction.AddParticipentId(builder, participent_id);
    ParticipantInfoAction.AddRoomId(builder, room_idOffset);
    return ParticipantInfoAction.EndParticipantInfoAction(builder);
  }

  public static void StartParticipantInfoAction(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddParticipentId(FlatBufferBuilder builder, ulong participentId) { builder.AddUlong(0, participentId, 0); }
  public static void AddRoomId(FlatBufferBuilder builder, StringOffset roomIdOffset) { builder.AddOffset(1, roomIdOffset.Value, 0); }
  public static Offset<MyFlatBuffer.ParticipantInfoAction> EndParticipantInfoAction(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.ParticipantInfoAction>(o);
  }
};


}
