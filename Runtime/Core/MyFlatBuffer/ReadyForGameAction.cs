// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ReadyForGameAction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ReadyForGameAction GetRootAsReadyForGameAction(ByteBuffer _bb) { return GetRootAsReadyForGameAction(_bb, new ReadyForGameAction()); }
  public static ReadyForGameAction GetRootAsReadyForGameAction(ByteBuffer _bb, ReadyForGameAction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ReadyForGameAction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint RoomId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<MyFlatBuffer.ReadyForGameAction> CreateReadyForGameAction(FlatBufferBuilder builder,
      uint room_id = 0) {
    builder.StartTable(1);
    ReadyForGameAction.AddRoomId(builder, room_id);
    return ReadyForGameAction.EndReadyForGameAction(builder);
  }

  public static void StartReadyForGameAction(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRoomId(FlatBufferBuilder builder, uint roomId) { builder.AddUint(0, roomId, 0); }
  public static Offset<MyFlatBuffer.ReadyForGameAction> EndReadyForGameAction(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.ReadyForGameAction>(o);
  }
};


}
