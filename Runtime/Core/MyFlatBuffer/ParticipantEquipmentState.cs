// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ParticipantEquipmentState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParticipantEquipmentState GetRootAsParticipantEquipmentState(ByteBuffer _bb) { return GetRootAsParticipantEquipmentState(_bb, new ParticipantEquipmentState()); }
  public static ParticipantEquipmentState GetRootAsParticipantEquipmentState(ByteBuffer _bb, ParticipantEquipmentState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParticipantEquipmentState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Equipments(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int EquipmentsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetEquipmentsBytes() { return __p.__vector_as_span<uint>(4, 4); }
#else
  public ArraySegment<byte>? GetEquipmentsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public uint[] GetEquipmentsArray() { return __p.__vector_as_array<uint>(4); }

  public static Offset<MyFlatBuffer.ParticipantEquipmentState> CreateParticipantEquipmentState(FlatBufferBuilder builder,
      VectorOffset equipmentsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ParticipantEquipmentState.AddEquipments(builder, equipmentsOffset);
    return ParticipantEquipmentState.EndParticipantEquipmentState(builder);
  }

  public static void StartParticipantEquipmentState(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddEquipments(FlatBufferBuilder builder, VectorOffset equipmentsOffset) { builder.AddOffset(0, equipmentsOffset.Value, 0); }
  public static VectorOffset CreateEquipmentsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEquipmentsVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEquipmentsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MyFlatBuffer.ParticipantEquipmentState> EndParticipantEquipmentState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.ParticipantEquipmentState>(o);
  }
};


}
