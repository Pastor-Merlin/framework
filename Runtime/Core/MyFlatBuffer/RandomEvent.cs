// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RandomEvent : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public RandomEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Explode { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Ridicule { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Chaos { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public float Inflame { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }
  public float Fury { get { return __p.bb.GetFloat(__p.bb_pos + 16); } }
  public float Loss { get { return __p.bb.GetFloat(__p.bb_pos + 20); } }
  public float Negotiate { get { return __p.bb.GetFloat(__p.bb_pos + 24); } }
  public float TrafficJam { get { return __p.bb.GetFloat(__p.bb_pos + 28); } }

  public static Offset<MyFlatBuffer.RandomEvent> CreateRandomEvent(FlatBufferBuilder builder, float Explode, float Ridicule, float Chaos, float Inflame, float Fury, float Loss, float Negotiate, float TrafficJam) {
    builder.Prep(4, 32);
    builder.PutFloat(TrafficJam);
    builder.PutFloat(Negotiate);
    builder.PutFloat(Loss);
    builder.PutFloat(Fury);
    builder.PutFloat(Inflame);
    builder.PutFloat(Chaos);
    builder.PutFloat(Ridicule);
    builder.PutFloat(Explode);
    return new Offset<MyFlatBuffer.RandomEvent>(builder.Offset);
  }
};


}
