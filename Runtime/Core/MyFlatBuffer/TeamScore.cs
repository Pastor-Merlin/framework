// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TeamScore : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TeamScore GetRootAsTeamScore(ByteBuffer _bb) { return GetRootAsTeamScore(_bb, new TeamScore()); }
  public static TeamScore GetRootAsTeamScore(ByteBuffer _bb, TeamScore obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TeamScore __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint ExecutiveAbility { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint FightingAbility { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint FnsightAbility { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint SubjectiveScore { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint TotalScore { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<MyFlatBuffer.TeamScore> CreateTeamScore(FlatBufferBuilder builder,
      uint id = 0,
      uint executive_ability = 0,
      uint fighting_ability = 0,
      uint fnsight_ability = 0,
      uint subjective_score = 0,
      uint total_score = 0) {
    builder.StartTable(6);
    TeamScore.AddTotalScore(builder, total_score);
    TeamScore.AddSubjectiveScore(builder, subjective_score);
    TeamScore.AddFnsightAbility(builder, fnsight_ability);
    TeamScore.AddFightingAbility(builder, fighting_ability);
    TeamScore.AddExecutiveAbility(builder, executive_ability);
    TeamScore.AddId(builder, id);
    return TeamScore.EndTeamScore(builder);
  }

  public static void StartTeamScore(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(0, id, 0); }
  public static void AddExecutiveAbility(FlatBufferBuilder builder, uint executiveAbility) { builder.AddUint(1, executiveAbility, 0); }
  public static void AddFightingAbility(FlatBufferBuilder builder, uint fightingAbility) { builder.AddUint(2, fightingAbility, 0); }
  public static void AddFnsightAbility(FlatBufferBuilder builder, uint fnsightAbility) { builder.AddUint(3, fnsightAbility, 0); }
  public static void AddSubjectiveScore(FlatBufferBuilder builder, uint subjectiveScore) { builder.AddUint(4, subjectiveScore, 0); }
  public static void AddTotalScore(FlatBufferBuilder builder, uint totalScore) { builder.AddUint(5, totalScore, 0); }
  public static Offset<MyFlatBuffer.TeamScore> EndTeamScore(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.TeamScore>(o);
  }
};


}
