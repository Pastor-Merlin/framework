// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct GameScoreAction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static GameScoreAction GetRootAsGameScoreAction(ByteBuffer _bb) { return GetRootAsGameScoreAction(_bb, new GameScoreAction()); }
  public static GameScoreAction GetRootAsGameScoreAction(ByteBuffer _bb, GameScoreAction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameScoreAction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MyFlatBuffer.GeneralScore? GeneralScore { get { int o = __p.__offset(4); return o != 0 ? (MyFlatBuffer.GeneralScore?)(new MyFlatBuffer.GeneralScore()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public MyFlatBuffer.TeamScore? TeamScore(int j) { int o = __p.__offset(6); return o != 0 ? (MyFlatBuffer.TeamScore?)(new MyFlatBuffer.TeamScore()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TeamScoreLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<MyFlatBuffer.GameScoreAction> CreateGameScoreAction(FlatBufferBuilder builder,
      Offset<MyFlatBuffer.GeneralScore> general_scoreOffset = default(Offset<MyFlatBuffer.GeneralScore>),
      VectorOffset team_scoreOffset = default(VectorOffset)) {
    builder.StartTable(2);
    GameScoreAction.AddTeamScore(builder, team_scoreOffset);
    GameScoreAction.AddGeneralScore(builder, general_scoreOffset);
    return GameScoreAction.EndGameScoreAction(builder);
  }

  public static void StartGameScoreAction(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddGeneralScore(FlatBufferBuilder builder, Offset<MyFlatBuffer.GeneralScore> generalScoreOffset) { builder.AddOffset(0, generalScoreOffset.Value, 0); }
  public static void AddTeamScore(FlatBufferBuilder builder, VectorOffset teamScoreOffset) { builder.AddOffset(1, teamScoreOffset.Value, 0); }
  public static VectorOffset CreateTeamScoreVector(FlatBufferBuilder builder, Offset<MyFlatBuffer.TeamScore>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTeamScoreVectorBlock(FlatBufferBuilder builder, Offset<MyFlatBuffer.TeamScore>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTeamScoreVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MyFlatBuffer.GameScoreAction> EndGameScoreAction(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.GameScoreAction>(o);
  }
};


}
