// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoleWeaponState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RoleWeaponState GetRootAsRoleWeaponState(ByteBuffer _bb) { return GetRootAsRoleWeaponState(_bb, new RoleWeaponState()); }
  public static RoleWeaponState GetRootAsRoleWeaponState(ByteBuffer _bb, RoleWeaponState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoleWeaponState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MyFlatBuffer.EquipmentType WeaponType { get { int o = __p.__offset(4); return o != 0 ? (MyFlatBuffer.EquipmentType)__p.bb.GetSbyte(o + __p.bb_pos) : MyFlatBuffer.EquipmentType.MAIN; } }
  public uint BulletCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public MyFlatBuffer.WeaponUseState State { get { int o = __p.__offset(8); return o != 0 ? (MyFlatBuffer.WeaponUseState)__p.bb.GetSbyte(o + __p.bb_pos) : MyFlatBuffer.WeaponUseState.UNDER_USING; } }

  public static Offset<MyFlatBuffer.RoleWeaponState> CreateRoleWeaponState(FlatBufferBuilder builder,
      MyFlatBuffer.EquipmentType weapon_type = MyFlatBuffer.EquipmentType.MAIN,
      uint bullet_count = 0,
      MyFlatBuffer.WeaponUseState state = MyFlatBuffer.WeaponUseState.UNDER_USING) {
    builder.StartTable(3);
    RoleWeaponState.AddBulletCount(builder, bullet_count);
    RoleWeaponState.AddState(builder, state);
    RoleWeaponState.AddWeaponType(builder, weapon_type);
    return RoleWeaponState.EndRoleWeaponState(builder);
  }

  public static void StartRoleWeaponState(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddWeaponType(FlatBufferBuilder builder, MyFlatBuffer.EquipmentType weaponType) { builder.AddSbyte(0, (sbyte)weaponType, 0); }
  public static void AddBulletCount(FlatBufferBuilder builder, uint bulletCount) { builder.AddUint(1, bulletCount, 0); }
  public static void AddState(FlatBufferBuilder builder, MyFlatBuffer.WeaponUseState state) { builder.AddSbyte(2, (sbyte)state, 0); }
  public static Offset<MyFlatBuffer.RoleWeaponState> EndRoleWeaponState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.RoleWeaponState>(o);
  }
};


}
