// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ParticipantSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParticipantSetting GetRootAsParticipantSetting(ByteBuffer _bb) { return GetRootAsParticipantSetting(_bb, new ParticipantSetting()); }
  public static ParticipantSetting GetRootAsParticipantSetting(ByteBuffer _bb, ParticipantSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParticipantSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MyFlatBuffer.ParticipantGroup? Swat(int j) { int o = __p.__offset(4); return o != 0 ? (MyFlatBuffer.ParticipantGroup?)(new MyFlatBuffer.ParticipantGroup()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SwatLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public MyFlatBuffer.ParticipantGroup? FirstAid(int j) { int o = __p.__offset(6); return o != 0 ? (MyFlatBuffer.ParticipantGroup?)(new MyFlatBuffer.ParticipantGroup()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FirstAidLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public MyFlatBuffer.ParticipantGroup? FireControl(int j) { int o = __p.__offset(8); return o != 0 ? (MyFlatBuffer.ParticipantGroup?)(new MyFlatBuffer.ParticipantGroup()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FireControlLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public MyFlatBuffer.ParticipantGroup? Gangster(int j) { int o = __p.__offset(10); return o != 0 ? (MyFlatBuffer.ParticipantGroup?)(new MyFlatBuffer.ParticipantGroup()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int GangsterLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<MyFlatBuffer.ParticipantSetting> CreateParticipantSetting(FlatBufferBuilder builder,
      VectorOffset swatOffset = default(VectorOffset),
      VectorOffset first_aidOffset = default(VectorOffset),
      VectorOffset fire_controlOffset = default(VectorOffset),
      VectorOffset gangsterOffset = default(VectorOffset)) {
    builder.StartTable(4);
    ParticipantSetting.AddGangster(builder, gangsterOffset);
    ParticipantSetting.AddFireControl(builder, fire_controlOffset);
    ParticipantSetting.AddFirstAid(builder, first_aidOffset);
    ParticipantSetting.AddSwat(builder, swatOffset);
    return ParticipantSetting.EndParticipantSetting(builder);
  }

  public static void StartParticipantSetting(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddSwat(FlatBufferBuilder builder, VectorOffset swatOffset) { builder.AddOffset(0, swatOffset.Value, 0); }
  public static VectorOffset CreateSwatVector(FlatBufferBuilder builder, Offset<MyFlatBuffer.ParticipantGroup>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSwatVectorBlock(FlatBufferBuilder builder, Offset<MyFlatBuffer.ParticipantGroup>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSwatVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFirstAid(FlatBufferBuilder builder, VectorOffset firstAidOffset) { builder.AddOffset(1, firstAidOffset.Value, 0); }
  public static VectorOffset CreateFirstAidVector(FlatBufferBuilder builder, Offset<MyFlatBuffer.ParticipantGroup>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFirstAidVectorBlock(FlatBufferBuilder builder, Offset<MyFlatBuffer.ParticipantGroup>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFirstAidVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFireControl(FlatBufferBuilder builder, VectorOffset fireControlOffset) { builder.AddOffset(2, fireControlOffset.Value, 0); }
  public static VectorOffset CreateFireControlVector(FlatBufferBuilder builder, Offset<MyFlatBuffer.ParticipantGroup>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFireControlVectorBlock(FlatBufferBuilder builder, Offset<MyFlatBuffer.ParticipantGroup>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFireControlVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGangster(FlatBufferBuilder builder, VectorOffset gangsterOffset) { builder.AddOffset(3, gangsterOffset.Value, 0); }
  public static VectorOffset CreateGangsterVector(FlatBufferBuilder builder, Offset<MyFlatBuffer.ParticipantGroup>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGangsterVectorBlock(FlatBufferBuilder builder, Offset<MyFlatBuffer.ParticipantGroup>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartGangsterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MyFlatBuffer.ParticipantSetting> EndParticipantSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.ParticipantSetting>(o);
  }
};


}
