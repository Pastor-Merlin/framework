// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoomListInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RoomListInfo GetRootAsRoomListInfo(ByteBuffer _bb) { return GetRootAsRoomListInfo(_bb, new RoomListInfo()); }
  public static RoomListInfo GetRootAsRoomListInfo(ByteBuffer _bb, RoomListInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomListInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public ulong CreateTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string Password { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPasswordBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPasswordBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPasswordArray() { return __p.__vector_as_array<byte>(8); }
  public uint Duration { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public MyFlatBuffer.RoomStatus Status { get { int o = __p.__offset(12); return o != 0 ? (MyFlatBuffer.RoomStatus)__p.bb.GetSbyte(o + __p.bb_pos) : MyFlatBuffer.RoomStatus.PENDING; } }
  public MyFlatBuffer.RoomType Type { get { int o = __p.__offset(14); return o != 0 ? (MyFlatBuffer.RoomType)__p.bb.GetSbyte(o + __p.bb_pos) : MyFlatBuffer.RoomType.TO_JOIN; } }
  public uint MapId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<MyFlatBuffer.RoomListInfo> CreateRoomListInfo(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      ulong create_time = 0,
      StringOffset passwordOffset = default(StringOffset),
      uint duration = 0,
      MyFlatBuffer.RoomStatus status = MyFlatBuffer.RoomStatus.PENDING,
      MyFlatBuffer.RoomType type = MyFlatBuffer.RoomType.TO_JOIN,
      uint map_id = 0) {
    builder.StartTable(7);
    RoomListInfo.AddCreateTime(builder, create_time);
    RoomListInfo.AddMapId(builder, map_id);
    RoomListInfo.AddDuration(builder, duration);
    RoomListInfo.AddPassword(builder, passwordOffset);
    RoomListInfo.AddName(builder, nameOffset);
    RoomListInfo.AddType(builder, type);
    RoomListInfo.AddStatus(builder, status);
    return RoomListInfo.EndRoomListInfo(builder);
  }

  public static void StartRoomListInfo(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddCreateTime(FlatBufferBuilder builder, ulong createTime) { builder.AddUlong(1, createTime, 0); }
  public static void AddPassword(FlatBufferBuilder builder, StringOffset passwordOffset) { builder.AddOffset(2, passwordOffset.Value, 0); }
  public static void AddDuration(FlatBufferBuilder builder, uint duration) { builder.AddUint(3, duration, 0); }
  public static void AddStatus(FlatBufferBuilder builder, MyFlatBuffer.RoomStatus status) { builder.AddSbyte(4, (sbyte)status, 0); }
  public static void AddType(FlatBufferBuilder builder, MyFlatBuffer.RoomType type) { builder.AddSbyte(5, (sbyte)type, 0); }
  public static void AddMapId(FlatBufferBuilder builder, uint mapId) { builder.AddUint(6, mapId, 0); }
  public static Offset<MyFlatBuffer.RoomListInfo> EndRoomListInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.RoomListInfo>(o);
  }
};


}
