// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ParticipantInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParticipantInfo GetRootAsParticipantInfo(ByteBuffer _bb) { return GetRootAsParticipantInfo(_bb, new ParticipantInfo()); }
  public static ParticipantInfo GetRootAsParticipantInfo(ByteBuffer _bb, ParticipantInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParticipantInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TaskId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTaskIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTaskIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public bool IsCaptain { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public MyFlatBuffer.ParticipantRole Role { get { int o = __p.__offset(10); return o != 0 ? (MyFlatBuffer.ParticipantRole)__p.bb.GetSbyte(o + __p.bb_pos) : MyFlatBuffer.ParticipantRole.SWAT; } }
  public MyFlatBuffer.ParticipantStatus Status { get { int o = __p.__offset(12); return o != 0 ? (MyFlatBuffer.ParticipantStatus)__p.bb.GetSbyte(o + __p.bb_pos) : MyFlatBuffer.ParticipantStatus.PENDING; } }
  public MyFlatBuffer.ParticipantEquipmentState? Equipment { get { int o = __p.__offset(14); return o != 0 ? (MyFlatBuffer.ParticipantEquipmentState?)(new MyFlatBuffer.ParticipantEquipmentState()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool IsRobot { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint UserId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public MyFlatBuffer.RobotLevel RobotLevel { get { int o = __p.__offset(20); return o != 0 ? (MyFlatBuffer.RobotLevel)__p.bb.GetSbyte(o + __p.bb_pos) : MyFlatBuffer.RobotLevel.JUNIOR; } }
  public MyFlatBuffer.RobotCharacter RobotCharacter { get { int o = __p.__offset(22); return o != 0 ? (MyFlatBuffer.RobotCharacter)__p.bb.GetSbyte(o + __p.bb_pos) : MyFlatBuffer.RobotCharacter.NORMAL; } }
  public uint Id { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<MyFlatBuffer.ParticipantInfo> CreateParticipantInfo(FlatBufferBuilder builder,
      StringOffset task_idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      bool is_captain = false,
      MyFlatBuffer.ParticipantRole role = MyFlatBuffer.ParticipantRole.SWAT,
      MyFlatBuffer.ParticipantStatus status = MyFlatBuffer.ParticipantStatus.PENDING,
      Offset<MyFlatBuffer.ParticipantEquipmentState> equipmentOffset = default(Offset<MyFlatBuffer.ParticipantEquipmentState>),
      bool is_robot = false,
      uint user_id = 0,
      MyFlatBuffer.RobotLevel robot_level = MyFlatBuffer.RobotLevel.JUNIOR,
      MyFlatBuffer.RobotCharacter robot_character = MyFlatBuffer.RobotCharacter.NORMAL,
      uint id = 0) {
    builder.StartTable(11);
    ParticipantInfo.AddId(builder, id);
    ParticipantInfo.AddUserId(builder, user_id);
    ParticipantInfo.AddEquipment(builder, equipmentOffset);
    ParticipantInfo.AddName(builder, nameOffset);
    ParticipantInfo.AddTaskId(builder, task_idOffset);
    ParticipantInfo.AddRobotCharacter(builder, robot_character);
    ParticipantInfo.AddRobotLevel(builder, robot_level);
    ParticipantInfo.AddIsRobot(builder, is_robot);
    ParticipantInfo.AddStatus(builder, status);
    ParticipantInfo.AddRole(builder, role);
    ParticipantInfo.AddIsCaptain(builder, is_captain);
    return ParticipantInfo.EndParticipantInfo(builder);
  }

  public static void StartParticipantInfo(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddTaskId(FlatBufferBuilder builder, StringOffset taskIdOffset) { builder.AddOffset(0, taskIdOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddIsCaptain(FlatBufferBuilder builder, bool isCaptain) { builder.AddBool(2, isCaptain, false); }
  public static void AddRole(FlatBufferBuilder builder, MyFlatBuffer.ParticipantRole role) { builder.AddSbyte(3, (sbyte)role, 0); }
  public static void AddStatus(FlatBufferBuilder builder, MyFlatBuffer.ParticipantStatus status) { builder.AddSbyte(4, (sbyte)status, 0); }
  public static void AddEquipment(FlatBufferBuilder builder, Offset<MyFlatBuffer.ParticipantEquipmentState> equipmentOffset) { builder.AddOffset(5, equipmentOffset.Value, 0); }
  public static void AddIsRobot(FlatBufferBuilder builder, bool isRobot) { builder.AddBool(6, isRobot, false); }
  public static void AddUserId(FlatBufferBuilder builder, uint userId) { builder.AddUint(7, userId, 0); }
  public static void AddRobotLevel(FlatBufferBuilder builder, MyFlatBuffer.RobotLevel robotLevel) { builder.AddSbyte(8, (sbyte)robotLevel, 0); }
  public static void AddRobotCharacter(FlatBufferBuilder builder, MyFlatBuffer.RobotCharacter robotCharacter) { builder.AddSbyte(9, (sbyte)robotCharacter, 0); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(10, id, 0); }
  public static Offset<MyFlatBuffer.ParticipantInfo> EndParticipantInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.ParticipantInfo>(o);
  }
};


}
