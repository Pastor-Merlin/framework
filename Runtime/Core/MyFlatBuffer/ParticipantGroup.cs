// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ParticipantGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParticipantGroup GetRootAsParticipantGroup(ByteBuffer _bb) { return GetRootAsParticipantGroup(_bb, new ParticipantGroup()); }
  public static ParticipantGroup GetRootAsParticipantGroup(ByteBuffer _bb, ParticipantGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParticipantGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public byte Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public MyFlatBuffer.ParticipantInfo? Participant(int j) { int o = __p.__offset(8); return o != 0 ? (MyFlatBuffer.ParticipantInfo?)(new MyFlatBuffer.ParticipantInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParticipantLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<MyFlatBuffer.ParticipantGroup> CreateParticipantGroup(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      byte id = 0,
      VectorOffset participantOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ParticipantGroup.AddParticipant(builder, participantOffset);
    ParticipantGroup.AddName(builder, nameOffset);
    ParticipantGroup.AddId(builder, id);
    return ParticipantGroup.EndParticipantGroup(builder);
  }

  public static void StartParticipantGroup(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddId(FlatBufferBuilder builder, byte id) { builder.AddByte(1, id, 0); }
  public static void AddParticipant(FlatBufferBuilder builder, VectorOffset participantOffset) { builder.AddOffset(2, participantOffset.Value, 0); }
  public static VectorOffset CreateParticipantVector(FlatBufferBuilder builder, Offset<MyFlatBuffer.ParticipantInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParticipantVectorBlock(FlatBufferBuilder builder, Offset<MyFlatBuffer.ParticipantInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParticipantVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MyFlatBuffer.ParticipantGroup> EndParticipantGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.ParticipantGroup>(o);
  }
};


}
