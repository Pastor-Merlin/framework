// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct WeatherSetting : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public WeatherSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Cloud { get { return __p.bb.Get(__p.bb_pos + 0); } }
  public byte Rain { get { return __p.bb.Get(__p.bb_pos + 1); } }
  public byte Snow { get { return __p.bb.Get(__p.bb_pos + 2); } }
  public byte WindPower { get { return __p.bb.Get(__p.bb_pos + 3); } }
  public byte WindDirection { get { return __p.bb.Get(__p.bb_pos + 4); } }
  public byte Sand { get { return __p.bb.Get(__p.bb_pos + 5); } }
  public byte Fog { get { return __p.bb.Get(__p.bb_pos + 6); } }
  public bool ManualConfiguration { get { return 0!=__p.bb.Get(__p.bb_pos + 7); } }

  public static Offset<MyFlatBuffer.WeatherSetting> CreateWeatherSetting(FlatBufferBuilder builder, byte Cloud, byte Rain, byte Snow, byte WindPower, byte WindDirection, byte Sand, byte Fog, bool ManualConfiguration) {
    builder.Prep(1, 8);
    builder.PutBool(ManualConfiguration);
    builder.PutByte(Fog);
    builder.PutByte(Sand);
    builder.PutByte(WindDirection);
    builder.PutByte(WindPower);
    builder.PutByte(Snow);
    builder.PutByte(Rain);
    builder.PutByte(Cloud);
    return new Offset<MyFlatBuffer.WeatherSetting>(builder.Offset);
  }
};


}
