// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoleChangeWeaponAction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RoleChangeWeaponAction GetRootAsRoleChangeWeaponAction(ByteBuffer _bb) { return GetRootAsRoleChangeWeaponAction(_bb, new RoleChangeWeaponAction()); }
  public static RoleChangeWeaponAction GetRootAsRoleChangeWeaponAction(ByteBuffer _bb, RoleChangeWeaponAction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoleChangeWeaponAction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MyFlatBuffer.EquipmentType WeaponType { get { int o = __p.__offset(4); return o != 0 ? (MyFlatBuffer.EquipmentType)__p.bb.GetSbyte(o + __p.bb_pos) : MyFlatBuffer.EquipmentType.MAIN; } }

  public static Offset<MyFlatBuffer.RoleChangeWeaponAction> CreateRoleChangeWeaponAction(FlatBufferBuilder builder,
      MyFlatBuffer.EquipmentType weapon_type = MyFlatBuffer.EquipmentType.MAIN) {
    builder.StartTable(1);
    RoleChangeWeaponAction.AddWeaponType(builder, weapon_type);
    return RoleChangeWeaponAction.EndRoleChangeWeaponAction(builder);
  }

  public static void StartRoleChangeWeaponAction(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddWeaponType(FlatBufferBuilder builder, MyFlatBuffer.EquipmentType weaponType) { builder.AddSbyte(0, (sbyte)weaponType, 0); }
  public static Offset<MyFlatBuffer.RoleChangeWeaponAction> EndRoleChangeWeaponAction(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyFlatBuffer.RoleChangeWeaponAction>(o);
  }
};


}
